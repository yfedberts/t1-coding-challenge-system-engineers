version: "3.8"
services:
  database:
    container_name: t1-coding-challenge-database
    image: mongo:4.4.3
    ports:
      - "27017:27017"

  zookeeper:
    container_name: t1-coding-challenge-zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    container_name: t1-coding-challenge-kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824

  kafka-producer:
    container_name: t1-coding-challenge-kafka-producer
    build: ./kafka-producer
    depends_on:
      - kafka

  frontend-service:
    container_name: t1-coding-challenge-frontend-service
    build:
      context: ./frontend-service
      target: ${TARGET:-production}
    ports:
      - "3001:3001"
    depends_on:
      - kafka-producer
    volumes:
      - ./frontend-service:/app
      - /app/node_modules

  calculation-service:
    container_name: t1-coding-challenge-calculation-service
    build: ./calculation-service
    depends_on:
      - kafka-producer
      - database

  frontend:
    container_name: t1-coding-challenge-frontend
    build:
      context: ./frontend
      target: dev # Always using the dev stage here
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - frontend-service
